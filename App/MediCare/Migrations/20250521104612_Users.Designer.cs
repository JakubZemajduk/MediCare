// <auto-generated />
using System;
using MediCare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediCare.Migrations
{
    [DbContext(typeof(DB_MediCareContext))]
    [Migration("20250521104612_Users")]
    partial class Users
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MediCare.Data.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MediCare.Data.Models.AppointmentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AppointmentReports");
                });

            modelBuilder.Entity("MediCare.Data.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoctorNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorNumber = "1000001",
                            FirstName = "Jan",
                            Gender = 1,
                            LastName = "Kowalski",
                            PhoneNumber = "123456789",
                            SpecializationId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorNumber = "1000002",
                            FirstName = "Anna",
                            Gender = 2,
                            LastName = "Nowak",
                            PhoneNumber = "987654321",
                            SpecializationId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoctorNumber = "1000003",
                            FirstName = "Piotr",
                            Gender = 1,
                            LastName = "Zieliński",
                            PhoneNumber = "111222333",
                            SpecializationId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            DoctorNumber = "1000004",
                            FirstName = "Katarzyna",
                            Gender = 2,
                            LastName = "Wiśniewska",
                            PhoneNumber = "444555666",
                            SpecializationId = 4,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoctorNumber = "1000005",
                            FirstName = "Tomasz",
                            Gender = 1,
                            LastName = "Mazur",
                            PhoneNumber = "777888999",
                            SpecializationId = 5,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            DoctorNumber = "1000006",
                            FirstName = "Ewa",
                            Gender = 2,
                            LastName = "Jankowska",
                            PhoneNumber = "222333444",
                            SpecializationId = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            DoctorNumber = "1000007",
                            FirstName = "Andrzej",
                            Gender = 1,
                            LastName = "Lewandowski",
                            PhoneNumber = "555666777",
                            SpecializationId = 2,
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            DoctorNumber = "1000008",
                            FirstName = "Magdalena",
                            Gender = 2,
                            LastName = "Dąbrowska",
                            PhoneNumber = "888999000",
                            SpecializationId = 3,
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            DoctorNumber = "1000009",
                            FirstName = "Marek",
                            Gender = 1,
                            LastName = "Kaczmarek",
                            PhoneNumber = "101202303",
                            SpecializationId = 4,
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            DoctorNumber = "1000010",
                            FirstName = "Barbara",
                            Gender = 2,
                            LastName = "Szymańska",
                            PhoneNumber = "404505606",
                            SpecializationId = 5,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("MediCare.Data.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MediCare.Data.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kardiologia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dermatologia"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Neurologia"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Pediatria"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ortopedia"
                        });
                });

            modelBuilder.Entity("MediCare.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jkowalski@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "anowak@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "pzielinski@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "kwiśniewska@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 5,
                            Email = "tmazur@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 6,
                            Email = "ejankowska@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 7,
                            Email = "alewandowski@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 8,
                            Email = "mdąbrowska@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 9,
                            Email = "mkaczmarek@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        },
                        new
                        {
                            Id = 10,
                            Email = "bszymańska@example.com",
                            PasswordHash = "hashed",
                            Role = 1
                        });
                });

            modelBuilder.Entity("MediCare.Data.Models.Appointment", b =>
                {
                    b.HasOne("MediCare.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MediCare.Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MediCare.Data.Models.AppointmentReport", b =>
                {
                    b.HasOne("MediCare.Data.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MediCare.Data.Models.Doctor", b =>
                {
                    b.HasOne("MediCare.Data.Models.Specialization", "specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediCare.Data.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("specialization");

                    b.Navigation("user");
                });

            modelBuilder.Entity("MediCare.Data.Models.Patient", b =>
                {
                    b.HasOne("MediCare.Data.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
